{"version":3,"sources":["components/contactForm/ContactForm.module.css","components/container/Container.module.css","components/filter/Filter.module.css","redux/contacts/contactsActions/contactsActions.js","redux/contacts/contactsReduser/contactsReduser.js","redux/middlewares/middlewares.js","service/contactsPrepations.js","redux/store.js","redux/contacts/contactsSelectors/contactsSelectors.js","components/contactForm/ContactForm.js","components/filter/Filter.js","components/contactsList/ContactsList.js","redux/operations/contactsOperations.js","components/App.js","index.js","components/contactsList/ContactsList.module.css"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","removeContactRequest","removeContactSuccess","removeContactError","setFilter","items","createReducer","_","payload","state","filter","contact","id","isLoading","contactsReduser","combineReducers","middlewarePreventContactsDuplication","store","next","action","type","contacts","getState","name","isAlreadyInContacts","newName","some","toLowerCase","checkIsDoublingContacts","alert","dataUI","alertMsg","configureStore","reducer","middleware","getDefaultMiddleware","concat","getFilter","getContacts","getContactsData","contactsData","includes","title","search","allContacts","contactsToRender","ContactForm","addNewContact","useSelector","useState","FORM_INITIAL_DATA","setState","useEffect","number","inputNameId","nanoid","inputNumberId","handleChange","e","target","value","prev","inputName","inputTel","submitBtn","className","form","onSubmit","preventDefault","htmlFor","input","pattern","required","autoComplete","onChange","btn","Filter","inputSearch","dispatch","useDispatch","filterInputId","wrap","listWrap","styles","listItem","ContactsList","contactsDataToRender","deleteBtn","noDataToRender","length","map","item","onClick","axios","delete","BASE_URL","then","catch","error","finally","titleMain","titleSecondary","App","data","preparadeData","Object","keys","key","container","post","res","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.20af73d5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1KRE_\",\"btn\":\"ContactForm_btn__1hxRM\",\"input\":\"ContactForm_input__3C3Ar\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__102KD\",\"title\":\"Container_title__2Wfz0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Filter_wrap__3ZZ-g\",\"listWrap\":\"Filter_listWrap__5GVfB\",\"listItem\":\"Filter_listItem__OPXmT\",\"name\":\"Filter_name__SSS2z\",\"number\":\"Filter_number__1R-sp\",\"btn\":\"Filter_btn__3MXGS\"};","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const fetchContactsRequest = createAction(\r\n  \"contacts/fetchContactsRequest\"\r\n);\r\nexport const fetchContactsSuccess = createAction(\r\n  \"contacts/fetchContactsSuccess\"\r\n);\r\nexport const fetchContactsError = createAction(\"contacts/fetchContactsError\");\r\n\r\nexport const addContactRequest = createAction(\"contacts/addContactRequest\");\r\nexport const addContactSuccess = createAction(\"contacts/addContactSuccess\");\r\nexport const addContactError = createAction(\"contacts/addContactError\");\r\n\r\nexport const removeContactRequest = createAction(\r\n  \"contacts/removeContactRequest\"\r\n);\r\nexport const removeContactSuccess = createAction(\r\n  \"contacts/removeContactSuccess\"\r\n);\r\nexport const removeContactError = createAction(\"contacts/removeContactError\");\r\n\r\nexport const setFilter = createAction(\"contacts/setFilter\");\r\n","import { createReducer, combineReducers } from \"@reduxjs/toolkit\";\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  removeContactRequest,\r\n  removeContactSuccess,\r\n  setFilter,\r\n} from \"../contactsActions/contactsActions\";\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state = [], { payload }) => [...state, payload],\r\n  [removeContactSuccess]: (state = [], { payload }) =>\r\n    state.filter((contact) => contact.id !== payload),\r\n});\r\n\r\nconst isLoading = createReducer(false, {\r\n  [fetchContactsRequest]: (state) => !state,\r\n  [addContactRequest]: (state) => !state,\r\n  [removeContactRequest]: (state) => !state,\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [setFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst contactsReduser = combineReducers({ items, filter, isLoading });\r\n\r\nexport default contactsReduser;\r\n","import { checkIsDoublingContacts } from \"../../service/contactsPrepations\";\r\nimport { addContactRequest } from \"../contacts/contactsActions/contactsActions\";\r\nimport dataUI from \"../../data/dataUI.json\";\r\n\r\nconst middlewarePreventContactsDuplication = (store) => (next) => (action) => {\r\n  if (action.type !== addContactRequest.type) {\r\n    next(action);\r\n    return;\r\n  }\r\n  const { items: contacts } = store.getState().contacts;\r\n  const { name } = action.payload;\r\n  const isAlreadyInContacts = checkIsDoublingContacts(contacts, name);\r\n  if (isAlreadyInContacts) {\r\n    alert(`${name} ${dataUI.alertMsg}`);\r\n    return isAlreadyInContacts;\r\n  }\r\n  next(action);\r\n};\r\n\r\nexport default middlewarePreventContactsDuplication;\r\n","import { allContacts, search } from \"../data/dataUI.json\";\r\n\r\nconst checkIsDoublingContacts = (contacts, newName) => {\r\n  const isAlreadyInContacts = contacts.some(\r\n    ({ name }) => name.toLowerCase() === newName.toLowerCase()\r\n  );\r\n  return isAlreadyInContacts;\r\n};\r\n\r\nconst contactsToRender = (contacts, filter) => {\r\n  if (!filter) {\r\n    return { contacts, title: `${allContacts}` };\r\n  }\r\n  const filteredContacts = contacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(filter.toLowerCase())\r\n  );\r\n  return { contacts: filteredContacts, title: `${search}` };\r\n};\r\n\r\n//===============================================================\r\n// const contactsToRender = (state) => {\r\n//   const contacts = state.contacts.items;\r\n//   const filter = state.contacts.filter;\r\n//   if (!filter) {\r\n//     return { contacts, title: `${allContacts}` };\r\n//   }\r\n\r\n//   const filteredContacts = contacts.filter(({ name }) =>\r\n//     name.toLowerCase().includes(filter.toLowerCase())\r\n//   );\r\n\r\n//   return { contacts: filteredContacts, title: `${search}` };\r\n// };\r\n\r\nexport { checkIsDoublingContacts, contactsToRender };\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport contactsReduser from \"./contacts/contactsReduser/contactsReduser\";\r\nimport middlewarePreventContactsDuplication from \"./middlewares/middlewares\";\r\n\r\nconst store = configureStore({\r\n  reducer: { contacts: contactsReduser },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware().concat(middlewarePreventContactsDuplication),\r\n});\r\n\r\nexport default store;\r\n","import { contactsToRender } from \"../../../service/contactsPrepations\";\r\n\r\nconst getFilter = (state) => state.contacts.filter;\r\nconst getContacts = (state) => state.contacts.items;\r\nconst getIsLoading = (state) => state.contacts.isLoading;\r\n\r\nconst getContactsData = (state) => {\r\n  const filter = getFilter(state);\r\n  const contacts = getContacts(state);\r\n  const contactsData = contactsToRender(contacts, filter);\r\n  return contactsData;\r\n};\r\n\r\nexport { getContacts, getFilter, getIsLoading, getContactsData };\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { nanoid } from \"nanoid\";\r\nimport PropTypes from \"prop-types\";\r\nimport { FORM_INITIAL_DATA } from \"../../data/initialData.json\";\r\nimport { form, btn, input } from \"./ContactForm.module.css\";\r\nimport { getContacts } from \"../../redux/contacts/contactsSelectors/contactsSelectors\";\r\n\r\nconst ContactForm = ({ addNewContact, dataUI }) => {\r\n  const contacts = useSelector(getContacts);\r\n  const [state, setState] = useState({ ...FORM_INITIAL_DATA });\r\n\r\n  useEffect(() => {\r\n    setState({ ...FORM_INITIAL_DATA });\r\n  }, [contacts]);\r\n\r\n  const { name, number } = state;\r\n\r\n  const inputNameId = nanoid();\r\n  const inputNumberId = nanoid();\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setState((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    addNewContact(name, number);\r\n  };\r\n\r\n  const { inputName, inputTel, submitBtn } = dataUI;\r\n\r\n  return (\r\n    <form className={form} onSubmit={handleSubmit}>\r\n      <label htmlFor={inputNameId}>{inputName}</label>\r\n      <input\r\n        className={input}\r\n        id={inputNameId}\r\n        type=\"text\"\r\n        name=\"name\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        autoComplete=\"off\"\r\n        onChange={handleChange}\r\n        value={name}\r\n      />\r\n      <label htmlFor={inputNumberId}>{inputTel}</label>\r\n      <input\r\n        className={input}\r\n        id={inputNumberId}\r\n        type=\"tel\"\r\n        name=\"number\"\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n        required\r\n        autoComplete=\"off\"\r\n        onChange={handleChange}\r\n        value={number}\r\n      />\r\n      <button className={btn} type=\"submit\">\r\n        {submitBtn}\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nContactForm.propTypes = {\r\n  addNewContact: PropTypes.func.isRequired,\r\n  dataUI: PropTypes.shape({\r\n    inputName: PropTypes.string.isRequired,\r\n    inputTel: PropTypes.string.isRequired,\r\n    submitBtn: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default ContactForm;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"nanoid\";\r\nimport PropTypes from \"prop-types\";\r\nimport { wrap } from \"./Filter.module.css\";\r\nimport { setFilter } from \"../../redux/contacts/contactsActions/contactsActions\";\r\nimport { getFilter } from \"../../redux/contacts/contactsSelectors/contactsSelectors\";\r\n\r\nconst Filter = ({ inputSearch }) => {\r\n  const filter = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleChange = (e) => {\r\n    const { value } = e.target;\r\n    dispatch(setFilter(value));\r\n  };\r\n\r\n  const filterInputId = nanoid();\r\n\r\n  return (\r\n    <div className={wrap}>\r\n      <label htmlFor={filterInputId}>{inputSearch}</label>\r\n      <input\r\n        id={filterInputId}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        autoComplete=\"off\"\r\n        onChange={handleChange}\r\n        value={filter}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  inputSearch: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./ContactsList.module.css\";\r\nimport { removeContact } from \"../../redux/operations/contactsOperations\";\r\n\r\nconst { listWrap, listItem, name, number, btn } = styles;\r\n\r\nconst ContactsList = ({ contactsDataToRender, dataUI }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { deleteBtn, noDataToRender } = dataUI;\r\n  const { title, contacts } = contactsDataToRender;\r\n\r\n  return contacts.length ? (\r\n    <>\r\n      <p>{title}</p>\r\n      <ul className={listWrap}>\r\n        {contacts.map((item) => (\r\n          <li className={listItem} key={item.id}>\r\n            {\" \"}\r\n            <p className={name}>\r\n              {item.name}: <span className={number}>{item.number}</span>\r\n            </p>\r\n            <button\r\n              className={btn}\r\n              type=\"button\"\r\n              onClick={() => dispatch(removeContact(item.id))}\r\n            >\r\n              {deleteBtn}\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  ) : (\r\n    <p>{noDataToRender}</p>\r\n  );\r\n};\r\n\r\nContactsList.propTypes = {\r\n  contactsDataToRender: PropTypes.shape({\r\n    title: PropTypes.string.isRequired,\r\n    contacts: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.string,\r\n        name: PropTypes.string,\r\n        number: PropTypes.string,\r\n      })\r\n    ).isRequired,\r\n  }).isRequired,\r\n  dataUI: PropTypes.shape({\r\n    deleteBtn: PropTypes.string.isRequired,\r\n    noDataToRender: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default ContactsList;\r\n","import {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  removeContactRequest,\r\n  removeContactSuccess,\r\n  removeContactError,\r\n} from \"../contacts/contactsActions/contactsActions\";\r\nimport axios from \"axios\";\r\nimport { BASE_URL } from \"../../data/firebase.json\";\r\n\r\nexport const fetchContacts = () => (dispatch) => {\r\n  dispatch(fetchContactsRequest());\r\n  axios(`${BASE_URL}.json`)\r\n    .then(({ data }) => {\r\n      if (!data) return;\r\n      const preparadeData = Object.keys(data).map((key) => ({\r\n        ...data[key],\r\n        id: key,\r\n      }));\r\n      dispatch(fetchContactsSuccess(preparadeData));\r\n    })\r\n    .catch((error) => dispatch(fetchContactsError(error)))\r\n    .finally(dispatch(fetchContactsRequest()));\r\n};\r\n\r\nexport const addContact = (data) => (dispatch) => {\r\n  const isAlreadyInContacts = dispatch(addContactRequest(data));\r\n  if (isAlreadyInContacts) return;\r\n  axios\r\n    .post(`${BASE_URL}.json`, data)\r\n    .then((res) => {\r\n      const id = res.data.name;\r\n      dispatch(addContactSuccess({ ...data, id }));\r\n    })\r\n    .catch((error) => dispatch(addContactError(error)))\r\n    .finally(dispatch(addContactRequest(data)));\r\n};\r\n\r\nexport const removeContact = (id) => (dispatch) => {\r\n  dispatch(removeContactRequest());\r\n\r\n  axios\r\n    .delete(`${BASE_URL}/${id}.json`)\r\n    .then(dispatch(removeContactSuccess(id)))\r\n    .catch((error) => dispatch(removeContactError(error)))\r\n    .finally(dispatch(removeContactRequest()));\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ContactForm from \"./contactForm/ContactForm\";\r\nimport Filter from \"./filter/Filter\";\r\nimport ContactsList from \"./contactsList/ContactsList\";\r\nimport styles from \"./container/Container.module.css\";\r\nimport dataUI from \"../data/dataUI.json\";\r\nimport {\r\n  addContact,\r\n  fetchContacts,\r\n} from \"../redux/operations/contactsOperations\";\r\nimport { getContactsData } from \"../redux/contacts/contactsSelectors/contactsSelectors\";\r\n\r\nconst {\r\n  titleMain,\r\n  titleSecondary,\r\n  inputName,\r\n  inputTel,\r\n  submitBtn,\r\n  deleteBtn,\r\n  inputSearch,\r\n  noDataToRender,\r\n} = dataUI;\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  const contactsDataToRender = useSelector(getContactsData);\r\n\r\n  const addNewContact = (name, number) =>\r\n    dispatch(addContact({ name, number }));\r\n\r\n  const { container, title } = styles;\r\n\r\n  return (\r\n    <div className={container}>\r\n      <h2 className={title}>{titleMain}</h2>\r\n\r\n      <ContactForm\r\n        dataUI={{ inputName, inputTel, submitBtn }}\r\n        addNewContact={addNewContact}\r\n      />\r\n\r\n      <h2 className={title}>{titleSecondary}</h2>\r\n\r\n      <Filter inputSearch={inputSearch} />\r\n\r\n      <ContactsList\r\n        contactsDataToRender={contactsDataToRender}\r\n        dataUI={{ deleteBtn, noDataToRender }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"modern-normalize/modern-normalize.css\";\nimport store from \"./redux/store\";\nimport App from \"./components/App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listWrap\":\"ContactsList_listWrap__3MsaX\",\"listItem\":\"ContactsList_listItem__2msw8\",\"btn\":\"ContactsList_btn__2sHYA\",\"name\":\"ContactsList_name__3gBT9\",\"number\":\"ContactsList_number__FvviE\"};"],"sourceRoot":""}