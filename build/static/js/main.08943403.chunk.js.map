{"version":3,"sources":["components/contactForm/ContactForm.module.css","components/contactsList/ContactsList.module.css","components/title/Title.module.css","components/filter/Filter.module.css","components/container/Container.module.css","redux/contacts/contactsActions/contactsActions.js","redux/contacts/contactsReduser/contactsReduser.js","redux/middlewares/middlewares.js","service/contactsPrepations.js","redux/store.js","components/title/Title.js","redux/contacts/contactsOperations/contactsOperations.js","redux/contacts/contactsSelectors/contactsSelectors.js","components/inputAndLabel/formInputAndLabel/FormInputAndLabelName.js","components/inputAndLabel/formInputAndLabel/FormInputAndLabelNumber.js","components/contactForm/ContactForm.js","components/inputAndLabel/FilterInputAndLabel.js","components/filter/Filter.js","components/notification/Notification.js","components/contactsList/contactsListItem/ContactsListItem.js","components/contactsList/ContactsList.js","components/App.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","removeContactRequest","removeContactSuccess","removeContactError","setFilter","items","createReducer","_","payload","state","filter","contact","id","isLoading","contactsReduser","combineReducers","middlewarePreventContactsDuplication","store","next","action","type","contacts","getState","name","isAlreadyInContacts","newName","some","toLowerCase","checkIsDoublingContacts","alert","dataUI","alertMsg","configureStore","reducer","middleware","getDefaultMiddleware","concat","Title","title","className","styles","removeContact","dispatch","axios","delete","BASE_URL","then","catch","error","getFilter","getContacts","getIsLoading","getContactsData","createSelector","includes","search","allContacts","contactsToRender","FormInputAndLabelName","handleChange","inputNameId","inputLable","htmlFor","pattern","required","autoComplete","onChange","e","target","value","FormInputAndLabelNumber","number","inputNumberId","ContactForm","useDispatch","useSelector","useState","FORM_INITIAL_DATA","setState","useEffect","nanoid","data","prev","inputName","inputTel","submitBtn","form","onSubmit","preventDefault","post","res","input","btn","disabled","FilterInputAndLabel","inputSearch","filterInputId","Filter","wrap","Notification","ContactsListItem","deleteBtn","listItem","onClick","ContactsList","noDataToRender","length","listWrap","map","titleMain","titleSecondary","isLoadingNow","App","preparadeData","Object","keys","key","container","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.08943403.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1KRE_\",\"btn\":\"ContactForm_btn__1hxRM\",\"input\":\"ContactForm_input__3C3Ar\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listWrap\":\"ContactsList_listWrap__3MsaX\",\"listItem\":\"ContactsList_listItem__2msw8\",\"btn\":\"ContactsList_btn__2sHYA\",\"name\":\"ContactsList_name__3gBT9\",\"number\":\"ContactsList_number__FvviE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Title_title__1jsSg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Filter_wrap__3ZZ-g\",\"listWrap\":\"Filter_listWrap__5GVfB\",\"listItem\":\"Filter_listItem__OPXmT\",\"name\":\"Filter_name__SSS2z\",\"number\":\"Filter_number__1R-sp\",\"btn\":\"Filter_btn__3MXGS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__102KD\",\"title\":\"Container_title__2Wfz0\"};","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const fetchContactsRequest = createAction(\r\n  \"contacts/fetchContactsRequest\"\r\n);\r\nexport const fetchContactsSuccess = createAction(\r\n  \"contacts/fetchContactsSuccess\"\r\n);\r\nexport const fetchContactsError = createAction(\"contacts/fetchContactsError\");\r\n\r\nexport const addContactRequest = createAction(\"contacts/addContactRequest\");\r\nexport const addContactSuccess = createAction(\"contacts/addContactSuccess\");\r\nexport const addContactError = createAction(\"contacts/addContactError\");\r\n\r\nexport const removeContactRequest = createAction(\r\n  \"contacts/removeContactRequest\"\r\n);\r\nexport const removeContactSuccess = createAction(\r\n  \"contacts/removeContactSuccess\"\r\n);\r\nexport const removeContactError = createAction(\"contacts/removeContactError\");\r\n\r\nexport const setFilter = createAction(\"contacts/setFilter\");\r\n","import { createReducer, combineReducers } from \"@reduxjs/toolkit\";\r\nimport {\r\n  addContactError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  fetchContactsError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  removeContactError,\r\n  removeContactRequest,\r\n  removeContactSuccess,\r\n  setFilter,\r\n} from \"../contactsActions/contactsActions\";\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state = [], { payload }) => [...state, payload],\r\n  [removeContactSuccess]: (state = [], { payload }) =>\r\n    state.filter((contact) => contact.id !== payload),\r\n});\r\n\r\nconst isLoading = createReducer(false, {\r\n  [fetchContactsRequest]: () => true,\r\n  [fetchContactsSuccess]: () => false,\r\n  [fetchContactsError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [removeContactRequest]: () => true,\r\n  [removeContactSuccess]: () => false,\r\n  [removeContactError]: () => false,\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [setFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst contactsReduser = combineReducers({ items, filter, isLoading });\r\n\r\nexport default contactsReduser;\r\n","import { checkIsDoublingContacts } from \"../../service/contactsPrepations\";\r\nimport { addContactRequest } from \"../contacts/contactsActions/contactsActions\";\r\nimport dataUI from \"../../data/dataUI.json\";\r\n\r\nconst middlewarePreventContactsDuplication = (store) => (next) => (action) => {\r\n  if (action.type !== addContactRequest.type) {\r\n    next(action);\r\n    return;\r\n  }\r\n  const { items: contacts } = store.getState().contacts;\r\n  const { name } = action.payload;\r\n  const isAlreadyInContacts = checkIsDoublingContacts(contacts, name);\r\n  if (isAlreadyInContacts) {\r\n    alert(`${name} ${dataUI.alertMsg}`);\r\n    return isAlreadyInContacts;\r\n  }\r\n  next(action);\r\n};\r\n\r\nexport default middlewarePreventContactsDuplication;\r\n","import { allContacts, search } from \"../data/dataUI.json\";\r\n\r\nconst checkIsDoublingContacts = (contacts, newName) => {\r\n  const isAlreadyInContacts = contacts.some(\r\n    ({ name }) => name.toLowerCase() === newName.toLowerCase()\r\n  );\r\n  return isAlreadyInContacts;\r\n};\r\n\r\nconst contactsToRender = (contacts, filter) => {\r\n  if (!filter) {\r\n    return { contacts, title: `${allContacts}` };\r\n  }\r\n  const filteredContacts = contacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(filter.toLowerCase())\r\n  );\r\n  return { contacts: filteredContacts, title: `${search}` };\r\n};\r\n\r\n//===============================================================\r\n// const contactsToRender = (state) => {\r\n//   const contacts = state.contacts.items;\r\n//   const filter = state.contacts.filter;\r\n//   if (!filter) {\r\n//     return { contacts, title: `${allContacts}` };\r\n//   }\r\n\r\n//   const filteredContacts = contacts.filter(({ name }) =>\r\n//     name.toLowerCase().includes(filter.toLowerCase())\r\n//   );\r\n\r\n//   return { contacts: filteredContacts, title: `${search}` };\r\n// };\r\n\r\nexport { checkIsDoublingContacts, contactsToRender };\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport contactsReduser from \"./contacts/contactsReduser/contactsReduser\";\r\nimport middlewarePreventContactsDuplication from \"./middlewares/middlewares\";\r\n\r\nconst store = configureStore({\r\n  reducer: { contacts: contactsReduser },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware().concat(middlewarePreventContactsDuplication),\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Title.module.css\";\r\n\r\nconst Title = ({ title }) => {\r\n  return <h2 className={styles.title}>{title}</h2>;\r\n};\r\n\r\nTitle.propTypes = {\r\n  title: PropTypes.string,\r\n};\r\n\r\nexport default Title;\r\n","import {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  removeContactRequest,\r\n  removeContactSuccess,\r\n  removeContactError,\r\n} from \"../contactsActions/contactsActions\";\r\nimport axios from \"axios\";\r\nimport { BASE_URL } from \"../../../data/firebase.json\";\r\n\r\nexport const fetchContacts = () => (dispatch) => {\r\n  dispatch(fetchContactsRequest());\r\n  axios(`${BASE_URL}.json`)\r\n    .then(({ data }) => {\r\n      if (!data) return;\r\n      const preparadeData = Object.keys(data).map((key) => ({\r\n        ...data[key],\r\n        id: key,\r\n      }));\r\n      dispatch(fetchContactsSuccess(preparadeData));\r\n    })\r\n    .catch((error) => dispatch(fetchContactsError(error)));\r\n};\r\n\r\nexport const addContact = (data) => (dispatch) => {\r\n  const isAlreadyInContacts = dispatch(addContactRequest(data));\r\n  if (isAlreadyInContacts) return;\r\n  axios\r\n    .post(`${BASE_URL}.json`, data)\r\n    .then((res) => {\r\n      const id = res.data.name;\r\n      dispatch(addContactSuccess({ ...data, id }));\r\n    })\r\n    .catch((error) => dispatch(addContactError(error)));\r\n};\r\n\r\nexport const removeContact = (id) => (dispatch) => {\r\n  dispatch(removeContactRequest());\r\n\r\n  axios\r\n    .delete(`${BASE_URL}/${id}.json`)\r\n    .then(dispatch(removeContactSuccess(id)))\r\n    .catch((error) => dispatch(removeContactError(error)));\r\n};\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\nimport { contactsToRender } from \"../../../service/contactsPrepations\";\r\n\r\nconst getFilter = (state) => state.contacts.filter;\r\nconst getContacts = (state) => state.contacts.items;\r\nconst getIsLoading = (state) => state.contacts.isLoading;\r\n\r\nconst getContactsData = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => contactsToRender(contacts, filter)\r\n);\r\n\r\nexport { getContacts, getFilter, getIsLoading, getContactsData };\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst FormInputAndLabelName = ({\r\n  name,\r\n  handleChange,\r\n  inputNameId,\r\n  className,\r\n  inputLable,\r\n}) => {\r\n  const onChange = (e) => {\r\n    const { name, value } = e.target;\r\n    handleChange({ name, value });\r\n  };\r\n  return (\r\n    <>\r\n      <label htmlFor={inputNameId}>{inputLable}</label>\r\n      <input\r\n        className={className}\r\n        id={inputNameId}\r\n        type=\"text\"\r\n        name=\"name\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        autoComplete=\"off\"\r\n        onChange={onChange}\r\n        value={name}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nFormInputAndLabelName.propTypes = {\r\n  name: PropTypes.string,\r\n  handleChange: PropTypes.func,\r\n  inputNameId: PropTypes.string,\r\n  className: PropTypes.string,\r\n  inputLable: PropTypes.string,\r\n};\r\n\r\nexport default FormInputAndLabelName;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst FormInputAndLabelNumber = ({\r\n  number,\r\n  handleChange,\r\n  inputNumberId,\r\n  className,\r\n  inputLable,\r\n}) => {\r\n  const onChange = (e) => {\r\n    const { name, value } = e.target;\r\n    handleChange({ name, value });\r\n  };\r\n  return (\r\n    <>\r\n      <label htmlFor={inputNumberId}>{inputLable}</label>\r\n      <input\r\n        className={className}\r\n        id={inputNumberId}\r\n        type=\"tel\"\r\n        name=\"number\"\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n        required\r\n        autoComplete=\"off\"\r\n        onChange={onChange}\r\n        value={number}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nFormInputAndLabelNumber.propTypes = {\r\n  number: PropTypes.string,\r\n  handleChange: PropTypes.func,\r\n  inputNumberId: PropTypes.string,\r\n  className: PropTypes.string,\r\n  inputLable: PropTypes.string,\r\n};\r\n\r\nexport default FormInputAndLabelNumber;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport PropTypes from \"prop-types\";\r\nimport { FORM_INITIAL_DATA } from \"../../data/initialData.json\";\r\nimport dataUI from \"../../data/dataUI.json\";\r\nimport { addContact } from \"../../redux/contacts/contactsOperations/contactsOperations\";\r\nimport { form, btn, input } from \"./ContactForm.module.css\";\r\nimport { getContacts } from \"../../redux/contacts/contactsSelectors/contactsSelectors\";\r\nimport FormInputAndLabelName from \"../inputAndLabel/formInputAndLabel/FormInputAndLabelName\";\r\nimport FormInputAndLabelNumber from \"../inputAndLabel/formInputAndLabel/FormInputAndLabelNumber\";\r\n\r\nconst ContactForm = ({ isLoading }) => {\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(getContacts);\r\n  const [state, setState] = useState({ ...FORM_INITIAL_DATA });\r\n\r\n  useEffect(() => {\r\n    setState({ ...FORM_INITIAL_DATA });\r\n  }, [contacts]);\r\n\r\n  const { name, number } = state;\r\n\r\n  const inputNameId = nanoid();\r\n  const inputNumberId = nanoid();\r\n\r\n  const handleChange = (data) => {\r\n    const { name, value } = data;\r\n    setState((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    dispatch(addContact({ name, number }));\r\n  };\r\n\r\n  const { inputName, inputTel, submitBtn } = dataUI;\r\n\r\n  return (\r\n    <form className={form} onSubmit={handleSubmit}>\r\n      <FormInputAndLabelName\r\n        handleChange={handleChange}\r\n        name={name}\r\n        inputNameId={inputNameId}\r\n        inputLable={inputName}\r\n        className={input}\r\n      />\r\n      <FormInputAndLabelNumber\r\n        handleChange={handleChange}\r\n        number={number}\r\n        inputNumberId={inputNumberId}\r\n        inputLable={inputTel}\r\n        className={input}\r\n      />\r\n      <button className={btn} type=\"submit\" disabled={isLoading}>\r\n        {submitBtn}\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nContactForm.propTypes = {\r\n  isLoading: PropTypes.bool,\r\n};\r\n\r\nexport default ContactForm;\r\n","import React from \"react\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst FilterInputAndLabel = ({ filter, handleChange, inputSearch }) => {\r\n  const onChange = (e) => {\r\n    const { value } = e.target;\r\n    handleChange(value);\r\n  };\r\n  const filterInputId = nanoid();\r\n  return (\r\n    <>\r\n      <label htmlFor={filterInputId}>{inputSearch}</label>\r\n      <input\r\n        id={filterInputId}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        autoComplete=\"off\"\r\n        onChange={onChange}\r\n        value={filter}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nFilterInputAndLabel.propTypes = {\r\n  filter: PropTypes.string,\r\n  handleChange: PropTypes.func,\r\n  inputSearch: PropTypes.string,\r\n};\r\n\r\nexport default FilterInputAndLabel;\r\n","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { inputSearch } from \"../../data/dataUI.json\";\r\nimport { wrap } from \"./Filter.module.css\";\r\nimport { setFilter } from \"../../redux/contacts/contactsActions/contactsActions\";\r\nimport { getFilter } from \"../../redux/contacts/contactsSelectors/contactsSelectors\";\r\nimport FilterInputAndLabel from \"../inputAndLabel/FilterInputAndLabel\";\r\n\r\nconst Filter = () => {\r\n  const dispatch = useDispatch();\r\n  const filter = useSelector(getFilter);\r\n\r\n  const handleChange = (value) => {\r\n    dispatch(setFilter(value));\r\n  };\r\n\r\n  return (\r\n    <div className={wrap}>\r\n      <FilterInputAndLabel\r\n        filter={filter}\r\n        handleChange={handleChange}\r\n        inputSearch={inputSearch}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Notification = ({ title }) => {\r\n  return <p>{title}</p>;\r\n};\r\n\r\nNotification.propTypes = {\r\n  title: PropTypes.string,\r\n};\r\n\r\nexport default Notification;\r\n","import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ContactsListItem = ({ contact, removeContact, styles, deleteBtn }) => {\r\n  const dispatch = useDispatch();\r\n  const removeContactItem = () => dispatch(removeContact(contact.id));\r\n\r\n  const { listItem, name, number, btn } = styles;\r\n\r\n  return (\r\n    <li className={listItem}>\r\n      {\" \"}\r\n      <p className={name}>\r\n        {contact.name}: <span className={number}>{contact.number}</span>\r\n      </p>\r\n      <button className={btn} type=\"button\" onClick={removeContactItem}>\r\n        {deleteBtn}\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactsListItem.propTypes = {\r\n  contact: PropTypes.shape({\r\n    id: PropTypes.string,\r\n    name: PropTypes.string,\r\n    number: PropTypes.string,\r\n  }),\r\n  removeContact: PropTypes.func.isRequired,\r\n  styles: PropTypes.shape({\r\n    listItem: PropTypes.string,\r\n    name: PropTypes.string,\r\n    number: PropTypes.string,\r\n    btn: PropTypes.string,\r\n  }),\r\n};\r\n\r\nexport default ContactsListItem;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getContactsData } from \"../../redux/contacts/contactsSelectors/contactsSelectors\";\r\nimport dataUI from \"../../data/dataUI.json\";\r\nimport styles from \"./ContactsList.module.css\";\r\nimport ContactsListItem from \"./contactsListItem/ContactsListItem\";\r\nimport { removeContact } from \"../../redux/contacts/contactsOperations/contactsOperations\";\r\nimport Notification from \"../notification/Notification\";\r\n\r\nconst ContactsList = () => {\r\n  const { title, contacts } = useSelector(getContactsData);\r\n  const { deleteBtn, noDataToRender } = dataUI;\r\n\r\n  return contacts.length ? (\r\n    <>\r\n      <Notification title={title} />\r\n      <ul className={styles.listWrap}>\r\n        {contacts.map((contact) => (\r\n          <ContactsListItem\r\n            contact={contact}\r\n            removeContact={removeContact}\r\n            styles={styles}\r\n            deleteBtn={deleteBtn}\r\n            key={contact.id}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </>\r\n  ) : (\r\n    <p>{noDataToRender}</p>\r\n  );\r\n};\r\n\r\nexport default ContactsList;\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Title from \"./title/Title\";\r\nimport ContactForm from \"./contactForm/ContactForm\";\r\nimport Filter from \"./filter/Filter\";\r\nimport Notification from \"./notification/Notification\";\r\nimport ContactsList from \"./contactsList/ContactsList\";\r\nimport styles from \"./container/Container.module.css\";\r\nimport dataUI from \"../data/dataUI.json\";\r\nimport { fetchContacts } from \"../redux/contacts/contactsOperations/contactsOperations\";\r\nimport { getIsLoading } from \"../redux/contacts/contactsSelectors/contactsSelectors\";\r\n\r\nconst { titleMain, titleSecondary, isLoadingNow } = dataUI;\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch();\r\n  const isLoading = useSelector(getIsLoading);\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Title title={titleMain} />\r\n      <ContactForm isLoading={isLoading} />\r\n      <Title title={titleSecondary} />\r\n      <Filter />\r\n      {isLoading ? <Notification title={isLoadingNow} /> : <ContactsList />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"modern-normalize/modern-normalize.css\";\nimport store from \"./redux/store\";\nimport App from \"./components/App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}